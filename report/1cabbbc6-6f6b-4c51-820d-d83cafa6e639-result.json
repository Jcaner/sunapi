{"name": "test_get_adivser_scheduling", "status": "broken", "statusDetails": {"message": "libs.errors.CaseAssertFailed: 断言失败:500 != 200", "trace": "self = <libs.load.AssertActions object at 0x00000279D2AA65F8>\n\n    def exec_assert(self):\n        for k, v in self.asserts_dict.items():\n            log.debug('断言对象:{}'.format(k))\n            mod = k.split('.')[0]\n            if mod not in self.assert_type:\n                raise CaseAssertNotSport\n            if mod == 'body':\n                k_str = self.body_assert_parse(k)\n            elif mod == 'headers':\n                k_str = self.headers_assert_parse(k)\n            elif mod == 'http_code':\n                k_str = self.http_code_assert_parse(k)\n            log.debug('断言对象取值:{}'.format(k_str))\n            v_str = ReactData(v).reflex_variable()\n            try:\n>               assert k_str == v_str\nE               AssertionError\n\n..\\libs\\load.py:95: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<case.wifi_fenxiao_order_test.TestFenXiaoOrder object at 0x00000279D2A76DA0>,)\nkwargs = {}, func_name = 'test_get_adivser_scheduling'\ncase_obj = <libs.load.CaseFileRequest object at 0x00000279D2A76518>\ncase_asserts = {'body.code': 200, 'http_code': 200}, case_before = None\nresponse = <Response [200]>\n\n    def wrapper(*args, **kwargs):\n        func_name = getattr(func, '__name__')\n        if os.path.exists(file_path) is False:\n            raise CaseFileNotFound\n        case_obj = CaseFileRequest(file_path, func_name)\n        case_asserts = case_obj.asserts()\n        case_before = case_obj.tear_down()\n        response = case_obj.run()\n        if case_asserts:\n>           AssertActions(case_asserts, response).exec_assert()\n\n..\\libs\\load.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <libs.load.AssertActions object at 0x00000279D2AA65F8>\n\n    def exec_assert(self):\n        for k, v in self.asserts_dict.items():\n            log.debug('断言对象:{}'.format(k))\n            mod = k.split('.')[0]\n            if mod not in self.assert_type:\n                raise CaseAssertNotSport\n            if mod == 'body':\n                k_str = self.body_assert_parse(k)\n            elif mod == 'headers':\n                k_str = self.headers_assert_parse(k)\n            elif mod == 'http_code':\n                k_str = self.http_code_assert_parse(k)\n            log.debug('断言对象取值:{}'.format(k_str))\n            v_str = ReactData(v).reflex_variable()\n            try:\n                assert k_str == v_str\n            except AssertionError:\n>               raise CaseAssertFailed('断言失败:{} != {}'.format(k_str, v_str))\nE               libs.errors.CaseAssertFailed: 断言失败:500 != 200\n\n..\\libs\\load.py:97: CaseAssertFailed"}, "attachments": [{"name": "log", "source": "47cbdb17-77c5-4470-b835-3e1a3df80b7a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7aa63794-f7f7-41aa-8482-e824310ec25d-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "16e3d57a-2369-419f-a36b-7c7c629a8fb0-attachment.txt", "type": "text/plain"}], "start": 1553760978852, "stop": 1553760978986, "uuid": "4519928d-c0a2-4b69-b634-bf67c60565ff", "historyId": "c4bcaa24dc1ee2e611d7e2c9134d936c", "fullName": "case.wifi_fenxiao_order_test.TestFenXiaoOrder#test_get_adivser_scheduling", "labels": [{"name": "story", "value": "获取课顾排班"}, {"name": "feature", "value": "分校预约"}, {"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "wifi_fenxiao_order_test"}, {"name": "subSuite", "value": "TestFenXiaoOrder"}, {"name": "host", "value": "DESKTOP-MLOSGOM"}, {"name": "thread", "value": "59472-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.wifi_fenxiao_order_test"}]}